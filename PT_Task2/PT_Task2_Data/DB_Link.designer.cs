#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PT_Task2_Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DB")]
	public partial class DB_LinkDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBooks(Books instance);
    partial void UpdateBooks(Books instance);
    partial void DeleteBooks(Books instance);
    partial void InsertCatalog(Catalog instance);
    partial void UpdateCatalog(Catalog instance);
    partial void DeleteCatalog(Catalog instance);
    #endregion
		
		public DB_LinkDataContext() : 
				base(global::PT_Task2_Data.Properties.Settings.Default.DBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DB_LinkDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_LinkDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_LinkDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB_LinkDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Books> Books
		{
			get
			{
				return this.GetTable<Books>();
			}
		}
		
		public System.Data.Linq.Table<Catalog> Catalog
		{
			get
			{
				return this.GetTable<Catalog>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Books")]
	public partial class Books : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bookID;
		
		private System.Nullable<int> _entryID;
		
		private string _bookState;
		
		private EntityRef<Catalog> _Catalog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbookIDChanging(int value);
    partial void OnbookIDChanged();
    partial void OnentryIDChanging(System.Nullable<int> value);
    partial void OnentryIDChanged();
    partial void OnbookStateChanging(string value);
    partial void OnbookStateChanged();
    #endregion
		
		public Books()
		{
			this._Catalog = default(EntityRef<Catalog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int bookID
		{
			get
			{
				return this._bookID;
			}
			set
			{
				if ((this._bookID != value))
				{
					this.OnbookIDChanging(value);
					this.SendPropertyChanging();
					this._bookID = value;
					this.SendPropertyChanged("bookID");
					this.OnbookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryID", DbType="Int")]
		public System.Nullable<int> entryID
		{
			get
			{
				return this._entryID;
			}
			set
			{
				if ((this._entryID != value))
				{
					if (this._Catalog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnentryIDChanging(value);
					this.SendPropertyChanging();
					this._entryID = value;
					this.SendPropertyChanged("entryID");
					this.OnentryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookState", DbType="VarChar(10)")]
		public string bookState
		{
			get
			{
				return this._bookState;
			}
			set
			{
				if ((this._bookState != value))
				{
					this.OnbookStateChanging(value);
					this.SendPropertyChanging();
					this._bookState = value;
					this.SendPropertyChanged("bookState");
					this.OnbookStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catalog_Books", Storage="_Catalog", ThisKey="entryID", OtherKey="entryID", IsForeignKey=true)]
		public Catalog Catalog
		{
			get
			{
				return this._Catalog.Entity;
			}
			set
			{
				Catalog previousValue = this._Catalog.Entity;
				if (((previousValue != value) 
							|| (this._Catalog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Catalog.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Catalog.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._entryID = value.entryID;
					}
					else
					{
						this._entryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Catalog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Catalog")]
	public partial class Catalog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _entryID;
		
		private string _title;
		
		private string _author;
		
		private System.Nullable<bool> _hardback;
		
		private EntitySet<Books> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnentryIDChanging(int value);
    partial void OnentryIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnauthorChanging(string value);
    partial void OnauthorChanged();
    partial void OnhardbackChanging(System.Nullable<bool> value);
    partial void OnhardbackChanged();
    #endregion
		
		public Catalog()
		{
			this._Books = new EntitySet<Books>(new Action<Books>(this.attach_Books), new Action<Books>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int entryID
		{
			get
			{
				return this._entryID;
			}
			set
			{
				if ((this._entryID != value))
				{
					this.OnentryIDChanging(value);
					this.SendPropertyChanging();
					this._entryID = value;
					this.SendPropertyChanged("entryID");
					this.OnentryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(255)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_author", DbType="VarChar(255)")]
		public string author
		{
			get
			{
				return this._author;
			}
			set
			{
				if ((this._author != value))
				{
					this.OnauthorChanging(value);
					this.SendPropertyChanging();
					this._author = value;
					this.SendPropertyChanged("author");
					this.OnauthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hardback", DbType="Bit")]
		public System.Nullable<bool> hardback
		{
			get
			{
				return this._hardback;
			}
			set
			{
				if ((this._hardback != value))
				{
					this.OnhardbackChanging(value);
					this.SendPropertyChanging();
					this._hardback = value;
					this.SendPropertyChanged("hardback");
					this.OnhardbackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catalog_Books", Storage="_Books", ThisKey="entryID", OtherKey="entryID")]
		public EntitySet<Books> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Books entity)
		{
			this.SendPropertyChanging();
			entity.Catalog = this;
		}
		
		private void detach_Books(Books entity)
		{
			this.SendPropertyChanging();
			entity.Catalog = null;
		}
	}
}
#pragma warning restore 1591
